*CentOS 부팅 USB 만들기

1. CentOS iso 파일 다운로드
2. Rufus 다운로드 후 실행
3. 장치에 usb 선택
4. 부팅 선택에 다운받은 CentOS iso파일 선택
5. 시작
6. iso 이미지 모드로 쓰기(권장)
7. 데이터가 모두 삭제되어도 되는지 -> 확인 (좀 오래걸림)

*부팅 순서 변경

1. 장비 전원키고 부팅
2. del키 연타해서 바이오스 모드 들어가기
3. Boot 모드 들어가기
4. Boot Option #1을 USB Key로 변경
5. 순서 변경 후 저장

*부팅 에러

1. 부팅
GRUB loading
Welcome to GRUB!

error : file '/root/grub/i386-pc/normal.mod' not found
Entering rescue mode...
이렇게 뜸 이유는 grub이 훼손 되었을 때 발생한다고 함
2. ls
-> (hd0) (hd0,msdos1) (hd1) (hd1,msdos2) (hd1,msdos1)
3. ls (hd0,msdos1)/
-> System Volume Information/ [boot]/ .discinfo .treeinfo AppStream/ BaseOS/ boot/ efi/ eula extra_files.json image/ license media.repo autorun.inf autorun.ico (얘는 windows 파티션)
나머지 다 ls 해봤는데 Systemfile unknown뜸
4. 그래서 버전을 CentOS Stream 10에서 9로 낮춰서 다시 USB에 저장 (장비에 따라서 맞는 버전이 있음)
5. 다시 부팅하니 에러없이 실행!

*설치 시작 전 설정 및 실행
 
1. 설치 대상 지정(USB 하면 안됨 하드디스크로)
2. 디스크 선택 과정 중 디스크 공간 부족 뜸 -> 모든 파티션 삭제 후 공간 확보
3. ROOT 암호 설정 후 설치 시작
4. 설치 완료 후 재시작
5. 이름, 비밀번호 설정 후 시작

*네트워크 설정

1. ifconfig로 인터페이스 이름 확인 및 ip주소 확인 (inet 뒤에 주소가 ip주소)
2. cd /etc/NetworkManager/system-connections 디렉토리로 이동
3. ls로 파일 이름 확인 후 열기
4. [ipv4]아래 method=auto를 method=manual로 변경
5. method=manual아래 address1=ip 주소 추가후 저장
6. systemctl restart NetworkManager로 NetworkManager 서비스 재시작

*ip주소가 127.0.0.1로 나올 때

1. nmtui로 들어가서 enp4s0에 있는 127.0.0.1을 삭제하고 ipv4를 자동으로 변경 (이러고 시간이 지나니까 된거같음)
2. 자동으로 받은 ip는 인터넷이 안됨 그래서 장비 ip주소를 자동으로 하지 않고 수동으로 ip주소, gateway주소를 직접 설정
3. 인터페이스가 꺼져있다면 nmcli con up 인터페이스 이름 (인터페이스를 끄려면 nmcli con down 인터페이스 이름)
4. 설정 완료 후 systemctl restart NetworkManager
ip: 192.168.100.177
netmask: 255.255.255.0
gateway: 192.168.100.1

*Xshell에서 SSH 접속하기

1. sudo vi /etc/ssh/sshd_config파일로 들어가서
2. PermitRootLogin 주석 풀고 prohibit-password을 yes로 변경
3. PasswordAuthentication 주석 풀고 yes확인 후 저장
4. service sshd reload로 ssh서비스 재시작
5. ssh root@ip주소
6. 비밀번호 치고 확인

*yum 관련

- 현재 /etc/yum.repos.d/에 있는 centos-addons.repo, centos.repo파일에 metalink가 vault.centos.org로 되어있는데 지금은 운영하지 않음
- 그래서 metalink를 바꿔주어야 함
- CentOS Stream에서는 metalink보다 baseburl이 더 안정적이고 직관적이라고 함
- 그래서 metalink를 #으로 주석처리 한 후 밑에 baseurl을 추가해줌 
- baseurl주소는 https://mirror.stream.centos.org/9-stream/...으로 교체해 줌
- yum update를 하는데 필요한 항목는 BaseOS, AppStream, Extras packages임
- BaseOS, AppStream은 https://mirror.stream.centos.org/9-stream/에 들어있는데 Extras packages는 들어있지 않음
- Extras packages는  https://mirror.stream.centos.org/SIGs/9-stream/에 들어있기 때문에 SIGs를 넣어주어야 함
- baseos : baseurl=https://mirror.stream.centos.org/$releasever-stream/BaseOS/$basearch/os/
- AppStream : baseurl=https://mirror.stream.centos.org/9-stream/AppStream/$basearch/os/
- extras-common : baseurl=https://mirror.stream.centos.org/SIGs/9-stream/extras/$basearch/extras-common/

*일단 이거부터
- sudo yum install gcc gcc-c++ -y (c, c++언어용 컴파일러 설치) -y는 자동 yes


*apm 설치 (yum으로 설치)

- apache - mysql -php 또는 mysql - apache - php 순서로 설치해야 함 php 설치 시에 apache 및 mysql 관련 설정이 들어가기 때문
- 삭제는 yum remove 패키지 이름

*Apache 설치

1. sudo yum update로 등록된 저장소 내 패키지 정보를 최신으로 업데이트
2. yum info httpd로 설치할 Apache 버전 확인 후 sudo yum install httpd로 Apache 설치
3. systemctl enable httpd로 재기동시 자동시작 설정

*MySQL 설치

1. dnf install mysql mysql-server로 MySQL설치
2. systemctl enable mysqld로 재기동시 자동시작 설정
3. sudo grep 'temporary password' /var/log/mysql/mysqld.log로 암호 확인 후 로그인
4. mysql_secure_installation로 MySQL 초기설정
5. vi /etc/my.cnf.d/mysql-server.cnf로 시간대역 세팅(필수라고 함 MySQL 5.1 이후 나온 버전부터 시간대역을 지정하지 않으면 Java 등의 프로그램에서 에러가 발생되는 문제가 있음)
6. [mysqld]아래에 default_time_zone = '+09:00'추가 후 저장

*PHP 설치

1. yum info php로 설치할 php 버전 확인 후 sudo yum install php로 PHP설치
2. yum info php-*로 설치 가능한 PHP모듈 검색 후, 필요한 모듈 설치 가능
3. MySQL/MariaDB와 연동하기 위해 sudo yum install php-mysqlnd로 php-mysqlnd모듈 설치

*MySQL 실행 안 될때

- MySQL 데이터 디렉토리(/var/lib/mysql/)에 기존 파일이 있는지 확인
- sudo cp -r /var/lib/mysql /var/lib/mysql_backup로 중요 데이터 백업
- sudo systemctl stop mysqld
sudo rm -rf /var/lib/mysql/*
sudo mysqld --initialize --user=mysql로 기존 데이터 디렉토리를 제거한 후 MySQL을 초기화
- sudo chown -R mysql:mysql /var/lib/mysql
sudo chmod -R 750 /var/lib/mysql로 데이터 디렉토리에 올바른 권한이 설정되어 있는지 확인하고 설정 (이게 핵심인듯?)
- MySQL 서비스를 다시 시작하고 상태를 확인

*위에 방법 하고도 안 될때는
- getenforce (현재 SELinux의 상태를 확인)
- sudo setenforce 0 (SELinux를 Permissive 모드로 전환)
- 후에 sudo systemctl status mysqld

*apm 설치 (컴파일 설치)

- 패키지 설치를 하면 간편하게 가능하지만, 불필요한 파일들도 함께 패키지 단위로 설치되기 때문
- 개인 목적이 아닌 회사에서 업무적인 목적이나 공공이 사용하는 경우에는 패키지 설치를 막을 수 있음

*Apache 설치 (그냥 설치하지 않고 /usr/local/에 디렉토리 하나 만들어서 거기 안에 설치하기)

1. https://downloads.apache.org/ 에서 최신 버전 확인
2. wget http://downloads.apache.org/apr/apr-1.7.5.tar.gz
, wget http://downloads.apache.prg/apr/apr-util-1.6.3.tar.gz
, wget https://sourceforge.net/projects/pcre/files/pcre/8.45/pcre-8.45.tar.bz2
, wget https://dlcdn.apache.org/httpd/httpd-2.4.62.tar.gz 로 최신 버전 파일 다운로드 (홈페이지에서 최신 버전 확인)
3. tar xvfz로 gz 압축 풀기 bz2는 xvf로 풀어야 함
4. apr 설치
4-1. /usr/local/apache/apr-1.7.5로 경로에서
4-2. ./configure --prefix=/usr/local/apr 로 환경 설정 및 설치 경로 지정
4-3. make, make install로 컴파일과 설치 진행
5. apr-util 설치
5-1. cd /usr/local/apache/apr-util-1.6.3/로 경로 설정 후
5-2 ./configure --prefix=/usr/local/apr-util --with-apr=/usr/local/apr 로 환경 설정 및 설치 경로 지정
5-3 make, make install로 컴파일과 설치 진행
6. pcre 설치
6-1. cd /usr/local/apache/pcre-8.45/로 경로 설정 후
6-2. ./configure --prefix=/usr/local/pcre로 환경 설정 및 설치 경로 지정
6-3. make, make install로 컴파일과 설치 진행
7. apache 설치
7-1. cd /usr/local/apache/httpd-2.4.62/로 경로 설정 후
7-2. ./configure --prefix=/usr/local/apache2.4 \
--enable-module=so --enable-rewrite --enable-so \
--with-apr=/usr/local/apr \
--with-apr-util=/usr/local/apr-util \
--with-pcre=/usr/local/pcre \
--enable-mods-shared=all 로 환경 설정 및 설치 경로 지정
7-3. make, make install로 컴파일과 설치 진행
8. vi /usr/local/apache2.4/conf/httpd.conf에서 #ServerName www.example.com:80을 ServerName localhost로 변경 후 저장
9. sudo /usr/local/apache2.4/bin/httpd -k start로 apache 실행

*MySQL 설치

- cmake를 통해 설치하기 때문에 가장 먼저 cmake를 다운
1. /usr/local 경로에서 wget https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-8.0.40.tar.gz로 파일 다운로드 (홈페이지에서 최신 버전 확인)
2. tar xvfz mysql-8.0.40.tar.gz로 압축 해제
3. cd mysql-8.0.40로 들어가서 mkdir build 디렉토리를 만들어서 들어감
4. cmake \
.. \
-DCMAKE_INSTALL_PREFIX=/usr/local/mysql \
-DMYSQL_DATADIR=/usr/local/mysql/data \
-DMYSQL_UNIX_ADDR=/usr/local/mysql/mysql.sock \
-DMYSQL_TCP_PORT=3306 \
-DDEFAULT_CHARSET=utf8 \
-DDEFAULT_COLLATION=utf8_general_ci \
-DSYSCONFDIR=/etc \
-DWITH_EXTRA_CHARSETS=all \
-DWITH_INNOBASE_STORAGE_ENGINE=1 \
-DWITH_ARCHIVE_STORAGE_ENGINE=1 \
-DWITH_BLACKHOLE_STORAGE_ENGINE=1 \
-DDOWNLOAD_BOOST=1 \
-DWITH_BOOST=/usr/local/mysql/boost 설치코드 입력
5. make, make test, make install로 설치 완료
6. /usr/local/mysql-8.0.40/build 경로에서 groupadd mysql, useradd -r -g mysql -s /bin/false mysql로 그룹 및 유저를 생성
7. /usr/local/mysql 경로에서 mysql-files 디렉토리 생성
8. chown -R mysql:mysql /usr/local/mysql, chown mysql:mysql mysql-files, chmod 750 mysql-files로 권한을 부여
9. bin/mysqld --initialize --user=mysql \
--basedir=/usr/local/mysql \
--datadir=/usr/local/mysql/data 로 기본 DB생성 (기본 DB 생성을 완료하면 임시 비밀번호가 생성됨 root@localhost: _________)
10. bin/mysql_safe --user=mysql &로 MySQL서버를 실행 (ps -ef | grep mysqld 명령어로 MySQL이 실행되고 있는지 확인할 수 있음)
11. bin/mysql -u root -p로 로그인 (처음 DB생성할 때 임시 비밀번호 받은걸로 로그인)
12. ALTER USER 'root'@'localhost' IDENTIFIED BY '원하는 비밀번호'; 로 비밀번호 변경
13. bin/mysqladmin -u root -p shutdown후 비밀번호 입력 하면 MySQL 서버 종료
14. sudo cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqld로 복사
15. vi편집기로 mysqld를 열어 basedir과 datadir 뒤에 경로를 추가 후 저장
basedir=/usr/local/mysql
datadir=/usr/local/mysql/data
16. update-rc.d mysqld defaults로 mysqld 서비스를 등록

*PHP 설치

1. wget https://www.php.net/distributions/php-8.4.2.tar.gz로 파일 다운로드 (홈페이지에서 최신 버전 확인)
2. tar xvfz php-8.4.2.tar.gz로 압축 해제
3. cd php-8.4.2로 이동
4. ./configure \
--with-apxs2=/usr/local/apache2.4/bin/apxs \
--enable-mysqlnd \
--with-mysql-sock=mysqlnd \
--with-mysqli=mysqlnd \
--with-pdo-mysql=mysqlnd \
--with-imap-ssl \
--with-iconv \
--enable-gd \
--with-jpeg \
--with-libxml \
--with-openssl 설치코드 입력
5. make, make test, make install (test는 말 그대로 그냥 테스트)로 설치
6. Apache와 연동하기 위해 /usr/local/apache2.4/conf 경로에서 httpd.conf열기
7. 165 line 근처에서 php설치 확인이 가능 (LoadModule php_module	      modules/libphp.so 있는지 확인)
8. 400 line 근처에 AddType추가 (AddType application/x-httpd-php .php .html)
9. production 시스템용 설정 파일인 php.ini-production 파일을 /usr/local/lib/php.ini에 복사
10. vi로 phpinfo.php 파일 생성 후
<?php
phpinfo();
?> 입력
11. sudo /usr/local/apache2.4/bin/httpd -k start로 Apache 실행
12. sudo curl http://127.0.0.1로 실행 확인 (<html><body><h1>It works!</h1></body></html>)

*PHP 설치코드 입력 후 에러 떴을 때

1. 패키지가 설치되지 않아서 생기는 에러임
2. sudo dnf install 패키지명-devel로 설치 후 다시 실행하면 해결

*DPDK

- Intel에서 개발한 고성능 패킷 처리 소프트웨어로 고속 패킷 처리를 위한 라이브러리와 드라이버를 제공하고 NFV의 네트워크 성능을 높이기 위한 핵심 기술
- 운영체제의 도움을 받지 않고 오버헤드 없이 사용자 어플리케이션이 직접 하드웨어를 독점 제어할 수 있는 자체 인터페이스를 제공
- 한 마디로 커널을 우회하는 것

*DPDK 설치

1. wget https://fast.dpdk.org/rel/dpdk-24.11.tar.xz로 파일 다운로드 (홈페이지에서 최신 버전 확인)
2. tar xvf dpdk-24.11.tar.xz로 압축 해제
3. meson setup -Dexamples=all로 build 디렉토리를 생성하고 Meson 빌드 환경을 초기화

*DPDK 바인딩

1. cd dpdk-24.11/usertools경로로 이동해서  sudo ./dpdk-devbind.py --status로 현재 인터페이스가 어디에 연결되어 있는지 확인(처음에는 kernel에 연결되어 있음)
2. 인터페이스 앞에 있는 숫자(ex - 0000:05:00.0)를 기억
3. 현재 사용하고있는 인터페이스를 제외하고 다른 인터페이스에 Active가 표시 된다면 sudo ip link set 인터페이스이름 down으로 비활성화
4. sudo ./dpdk-devbind.py --bind=uio_pci_generic 0000:05:00.0로 바인딩 (2개 해줘야 함)
5. ./dpdk-devbind.py -s로 dpdk에 바인딩이 되었는지 확인

*DPDK 예제(L2 Forwarding with Crypto Sample Application)

- dpdk-24.11경로에서 ./build/examples/dpdk-l2fwd [EAL options] -- -p PORTMASK
                               [-P]
                               [-q NQ]
                               --[no-]mac-updating
                               [--portmap="(port, port)[,(port, port)]"] 로 실행
ex - ./build/examples/dpdk-l2fwd -c 0x3 -n 1 --vdev 'net_enetfec' -- -p 0x1
CPU의 첫 두 코어를 사용하여, 메모리 채널을 1개로 설정하고, net_enetfec 가상 장치를 추가로 사용하며, L2 forwarding 동작을 수행하는데, 포트 0에서만 패킷을 처리하도록 설정

- -c 0x3 : 코어 마스크를 지정
		   0x3은 바이너리로 11로, CPU의 첫 두 코어 (코어 0, 1)를 사용한다는 뜻
- -n 1 : 메모리 채널 수를 지정
		 일반적으로 사용 가능한 메모리 채널이 적을 때는 1을 지정
- --vdev 'net_enetfec' : 가상 NIC 장치(vdev)를 등록
						 실제 NIC이 아닌 소프트웨어 시뮬레이션된 NIC을 사용할 때 필요
- -- : 애플리케이션 전용 옵션의 시작
- -p 0x1 : 포트 마스크를 지정
		   0x1은 바이너리로 0001이므로, 포트 0만 활성화 하겠다는 뜻